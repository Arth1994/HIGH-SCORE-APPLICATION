package com.example.arth.axs175430_asg5;import android.app.Activity;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.TimeZone;public class AddRecord extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_add_record);        Toolbar toolbar = findViewById(R.id.app_bar);        setSupportActionBar(toolbar);        setDate();        setTime();        final Button addRecord = findViewById(R.id.buttonAddScore);        EditText name  = (EditText) findViewById(R.id.editName);        EditText score = (EditText)findViewById(R.id.editScore);        watchIfEdited(name, score, addRecord);        addRecord.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                validateandWriteToFile();            }        });    }    /*    * Enables the button is the user starts    * typing in the edit text fields    * */    private void watchIfEdited(final EditText name, final EditText score, final Button addRecord) {        //If player name is empty then don't enable the add button        name.addTextChangedListener(new TextWatcher()        {            public void afterTextChanged(Editable s)            {                if(name.length() == 0)                    addRecord.setEnabled(false); //disable send button if no text entered                else                    addRecord.setEnabled(true);  //otherwise enable            }            public void beforeTextChanged(CharSequence s, int start, int count, int after){            }            public void onTextChanged(CharSequence s, int start, int before, int count){            }        });        //If score is empty then don't enable the add button        score.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {                if(score.length() == 0)                    addRecord.setEnabled(false); //disable send button if no text entered                else                    addRecord.setEnabled(true);  //otherwise enable            }            @Override            public void afterTextChanged(Editable s) {            }        });        if(name.length() == 0 || score.length() == 0) addRecord.setEnabled(false);    }    /*     * This function checks file for valid input, removes bad data and then performs the add operation in the model     * */    private void validateandWriteToFile() {        DataLayer dataLayer = new DataLayer();        EditText name = findViewById(R.id.editName);        EditText score = findViewById(R.id.editScore);        TextView date = findViewById(R.id.currentDate);        TextView time = findViewById(R.id.currentTime);        if (TextUtils.isEmpty(name.getText()) || TextUtils.isEmpty(score.getText())) {            Toast.makeText(getApplicationContext(), "Please fill out all the fields", Toast.LENGTH_SHORT).show();        } else if (name.getText().length() > 30) {            name.setError("Name should be less than 30 characters");        } else if (score.getText().length() > 10) {            score.setError("Score should be less than 10 characters");        } else {            //We Perform the writing to the file operation in this section            String pName = name.getText().toString();            String pScore = score.getText().toString();            String pDate = date.getText().toString();            String pTime = time.getText().toString();            ScoreModel scoreModel = new ScoreModel(pName, pScore, pDate, pTime);            dataLayer.writeToFile(scoreModel, getApplicationContext());            setTime();            finish();        }    }    /*     * Sets the current time     * */    private void setTime() {        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("CST6CDT"));        Date currentLocalTime = cal.getTime();        DateFormat date = new SimpleDateFormat("HH:mm a");        date.setTimeZone(TimeZone.getTimeZone("CST6CDT"));        String localTime = date.format(currentLocalTime);        TextView tv1 = findViewById(R.id.currentTime);        tv1.setText(localTime);    }    /*     * Sets the Current Date     * */    private void setDate() {        TextView tv = findViewById(R.id.currentDate);        String ct = DateFormat.getDateInstance().format(new Date());        tv.setText(ct);    }}